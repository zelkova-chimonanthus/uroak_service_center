package name.uroak.uroak_service_center.sysad.services

import name.uroak.uroak_service_center.base.services.手続きサービスクラス
import name.uroak.uroak_service_center.shared.base.constants.共通引数フィールド名
import name.uroak.uroak_service_center.shared.base.execution.手続き呼出し
import name.uroak.uroak_service_center.shared.base.ret.戻り値クラス
import name.uroak.uroak_service_center.shared.base.ret.検索系戻り値クラス
import name.uroak.uroak_service_center.shared.base.util.手続き処理種別一覧
import name.uroak.uroak_service_center.shared.base.util.手続き実行情報クラス
import name.uroak.uroak_service_center.shared.util.extension.Boolean値で取得する
import name.uroak.uroak_service_center.shared.util.extension.Int値で取得する
import name.uroak.uroak_service_center.shared.util.extension.文字列値で取得する
import name.uroak.uroak_service_center.sysad.constants.引数フィールド名
import name.uroak.uroak_service_center.sysad.repository.*
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service

/**
 *
 */
@Service
class 実行権限検索手続き側手続きサービスクラス : 手続きサービスクラス {

    /***/
    @Autowired
    private lateinit var 実行権限管理検索手続き側リポジトリ: 実行権限管理検索手続き側リポジトリ

    /**
     *
     */
    constructor() : super("実行権限検索手続き側手続きサービス") {

    }

    /**
     *
     */
    @手続き呼出し(
        手続きコード = "permission",
        手続きコード補助コード = "list",
        手続きコード補助コード2 = "api_info",
        処理種別 = 手続き処理種別一覧.検索
    )
    fun 手続き情報を収集する(手続き実行情報: 手続き実行情報クラス): 戻り値クラス {
        val 戻り値 = 検索系戻り値クラス(手続き実行情報)

        val パラメータ = 手続き実行情報.汎用手続き用条件パラメータを返す()

        val 取得件数上限 = パラメータ.Int値で取得する(共通引数フィールド名.取得件数上限)
        val 取得開始位置 = パラメータ.Int値で取得する(共通引数フィールド名.取得開始位置)

        val 取得データ = 実行権限管理検索手続き側リポジトリ.手続き情報を収集する(
            手続き識別子 = パラメータ.Int値で取得する(引数フィールド名.手続き識別子),
            手続き名称 = パラメータ.文字列値で取得する(引数フィールド名.手続き名称),
            手続き処理種別 = パラメータ.Int値で取得する(引数フィールド名.手続き処理種別),
            親目録識別子 = パラメータ.Int値で取得する(引数フィールド名.親目録識別子),
            親目録名称 = パラメータ.文字列値で取得する(引数フィールド名.親目録名称),
            コントローラ識別子 = パラメータ.Int値で取得する(引数フィールド名.コントローラ識別子),
            コントローラ名称 = パラメータ.文字列値で取得する(引数フィールド名.コントローラ名称),
            コントローラURLパス = パラメータ.文字列値で取得する(引数フィールド名.コントローラURLパス),
            コントローラ使用中止 = パラメータ.Boolean値で取得する(引数フィールド名.コントローラ使用中止),
            手続きコード = パラメータ.文字列値で取得する(引数フィールド名.手続きコード),
            手続き補助コード = パラメータ.文字列値で取得する(引数フィールド名.手続き補助コード),
            手続き補助コード2 = パラメータ.文字列値で取得する(引数フィールド名.手続き補助コード2),
            手続きパス = パラメータ.文字列値で取得する(引数フィールド名.手続きパス),
            更新日時最大値 = パラメータ.文字列値で取得する(共通引数フィールド名.更新日時最大値),
            更新日時最小値 = パラメータ.文字列値で取得する(共通引数フィールド名.更新日時最小値),
            取得件数上限 = 取得件数上限,
            取得開始位置 = 取得開始位置
        )

        var 全体件数: Int? = 取得件数が限定されていれば全体件数を返す(取得件数上限 != null)

        return 戻り値.取得データをセットする(取得データ, 取得開始位置, 全体件数, 取得件数上限)
    }

    /**
     *
     */
    @手続き呼出し(
        手続きコード = "permission",
        手続きコード補助コード = "list",
        手続きコード補助コード2 = "api_dir_info",
        処理種別 = 手続き処理種別一覧.検索
    )
    fun 手続き目録情報を収集する(手続き実行情報: 手続き実行情報クラス): 戻り値クラス {
        val 戻り値 = 検索系戻り値クラス(手続き実行情報)

        val パラメータ = 手続き実行情報.汎用手続き用条件パラメータを返す()

        val 取得件数上限 = パラメータ.Int値で取得する(共通引数フィールド名.取得件数上限)
        val 取得開始位置 = パラメータ.Int値で取得する(共通引数フィールド名.取得開始位置)

        val 取得データ = 実行権限管理検索手続き側リポジトリ.手続き目録情報を収集する(
            目録識別子 = パラメータ.Int値で取得する(引数フィールド名.目録識別子),
            目録名称 = パラメータ.文字列値で取得する(引数フィールド名.目録名称),
            コントローラ連携目録 = パラメータ.Boolean値で取得する(引数フィールド名.コントローラ連携目録),
            コントローラ識別子 = パラメータ.Int値で取得する(引数フィールド名.コントローラ識別子),
            コントローラ名称 = パラメータ.文字列値で取得する(引数フィールド名.コントローラ名称),
            コントローラURLパス = パラメータ.文字列値で取得する(引数フィールド名.コントローラURLパス),
            コントローラ使用中止 = パラメータ.Boolean値で取得する(引数フィールド名.コントローラ使用中止),
            親目録識別子 = パラメータ.Int値で取得する(引数フィールド名.親目録識別子),
            親目録名称 = パラメータ.文字列値で取得する(引数フィールド名.親目録名称),
            登録手続き有無 = パラメータ.Boolean値で取得する(引数フィールド名.登録手続き有無),
            登録目録有無 = パラメータ.Boolean値で取得する(引数フィールド名.登録目録有無),
            登録有無 = パラメータ.Boolean値で取得する(引数フィールド名.登録有無),
            更新日時最大値 = パラメータ.文字列値で取得する(共通引数フィールド名.更新日時最大値),
            更新日時最小値 = パラメータ.文字列値で取得する(共通引数フィールド名.更新日時最小値),
            取得件数上限 = 取得件数上限,
            取得開始位置 = 取得開始位置
        )

        var 全体件数: Int? = 取得件数が限定されていれば全体件数を返す(取得件数上限 != null)

        return 戻り値.取得データをセットする(取得データ, 取得開始位置, 全体件数, 取得件数上限)
    }

    /**
     *
     */
    @手続き呼出し(
        手続きコード = "permission",
        手続きコード補助コード = "list",
        手続きコード補助コード2 = "api_grp_info",
        処理種別 = 手続き処理種別一覧.検索
    )
    fun 手続きグループ情報を収集する(手続き実行情報: 手続き実行情報クラス): 戻り値クラス {
        val 戻り値 = 検索系戻り値クラス(手続き実行情報)

        val パラメータ = 手続き実行情報.汎用手続き用条件パラメータを返す()

        val 取得件数上限 = パラメータ.Int値で取得する(共通引数フィールド名.取得件数上限)
        val 取得開始位置 = パラメータ.Int値で取得する(共通引数フィールド名.取得開始位置)

        val 取得データ = 実行権限管理検索手続き側リポジトリ.手続きグループ情報を収集する(
            グループ識別子 = パラメータ.Int値で取得する(引数フィールド名.グループ識別子),
            グループ名称 = パラメータ.文字列値で取得する(引数フィールド名.グループ名称),
            所属手続き有無 = パラメータ.Boolean値で取得する(引数フィールド名.所属手続き有無),
            所属目録有無 = パラメータ.Boolean値で取得する(引数フィールド名.所属目録有無),
            所属グループ有無 = パラメータ.Boolean値で取得する(引数フィールド名.所属グループ有無),
            メンバー種別不明有無 = パラメータ.Boolean値で取得する(引数フィールド名.メンバー種別不明有無),
            更新日時最大値 = パラメータ.文字列値で取得する(共通引数フィールド名.更新日時最大値),
            更新日時最小値 = パラメータ.文字列値で取得する(共通引数フィールド名.更新日時最小値),
            取得件数上限 = 取得件数上限,
            取得開始位置 = 取得開始位置
        )

        var 全体件数: Int? = 取得件数が限定されていれば全体件数を返す(取得件数上限 != null)

        return 戻り値.取得データをセットする(取得データ, 取得開始位置, 全体件数, 取得件数上限)
    }

    /**
     *
     */
    @手続き呼出し(
        手続きコード = "permission",
        手続きコード補助コード = "list",
        手続きコード補助コード2 = "api_grp_member_info",
        処理種別 = 手続き処理種別一覧.検索
    )
    fun 手続きグループメンバー情報を収集する(手続き実行情報: 手続き実行情報クラス): 戻り値クラス {
        val 戻り値 = 検索系戻り値クラス(手続き実行情報)

        val パラメータ = 手続き実行情報.汎用手続き用条件パラメータを返す()

        val 取得件数上限 = パラメータ.Int値で取得する(共通引数フィールド名.取得件数上限)
        val 取得開始位置 = パラメータ.Int値で取得する(共通引数フィールド名.取得開始位置)

        val 取得データ = 実行権限管理検索手続き側リポジトリ.手続きグループメンバー情報を収集する(
            グループ識別子 = パラメータ.Int値で取得する(引数フィールド名.グループ識別子),
            グループ名称 = パラメータ.文字列値で取得する(引数フィールド名.グループ名称),
            メンバー識別子 = パラメータ.Int値で取得する(引数フィールド名.メンバー識別子),
            メンバー種別 = パラメータ.Int値で取得する(引数フィールド名.メンバー種別),
            メンバー対象識別子 = パラメータ.Int値で取得する(引数フィールド名.メンバー対象識別子),
            メンバー手続き識別子 = パラメータ.Int値で取得する(引数フィールド名.メンバー手続き識別子),
            メンバー手続き名称 = パラメータ.文字列値で取得する(引数フィールド名.メンバー手続き名称),
            メンバー手続き親目録識別子 = パラメータ.Int値で取得する(引数フィールド名.メンバー手続き親目録識別子),
            メンバー手続き親目録有無 = パラメータ.Boolean値で取得する(引数フィールド名.メンバー手続き親目録有無),
            メンバー手続き親目録名称 = パラメータ.文字列値で取得する(引数フィールド名.メンバー手続き親目録名称),
            メンバー目録識別子 = パラメータ.Int値で取得する(引数フィールド名.メンバー目録識別子),
            メンバー目録名称 = パラメータ.文字列値で取得する(引数フィールド名.メンバー目録名称),
            メンバー目録親目録識別子 = パラメータ.Int値で取得する(引数フィールド名.メンバー目録親目録識別子),
            メンバー目録親目録有無 = パラメータ.Boolean値で取得する(引数フィールド名.メンバー目録親目録有無),
            メンバー目録親目録名称 = パラメータ.文字列値で取得する(引数フィールド名.メンバー目録親目録名称),
            メンバーグループ識別子 = パラメータ.Int値で取得する(引数フィールド名.メンバーグループ識別子),
            メンバーグループ名称 = パラメータ.文字列値で取得する(引数フィールド名.メンバーグループ名称),
            更新日時最大値 = パラメータ.文字列値で取得する(共通引数フィールド名.更新日時最大値),
            更新日時最小値 = パラメータ.文字列値で取得する(共通引数フィールド名.更新日時最小値),
            取得件数上限 = 取得件数上限,
            取得開始位置 = 取得開始位置
        )

        var 全体件数: Int? = 取得件数が限定されていれば全体件数を返す(取得件数上限 != null)

        return 戻り値.取得データをセットする(取得データ, 取得開始位置, 全体件数, 取得件数上限)
    }

    /**
     *
     */
    @手続き呼出し(
        手続きコード = "permission",
        手続きコード補助コード = "list",
        手続きコード補助コード2 = "controller_info",
        処理種別 = 手続き処理種別一覧.検索
    )
    fun コントローラ情報を収集する(手続き実行情報: 手続き実行情報クラス): 戻り値クラス {
        val 戻り値 = 検索系戻り値クラス(手続き実行情報)

        val パラメータ = 手続き実行情報.汎用手続き用条件パラメータを返す()

        val 取得件数上限 = パラメータ.Int値で取得する(共通引数フィールド名.取得件数上限)
        val 取得開始位置 = パラメータ.Int値で取得する(共通引数フィールド名.取得開始位置)

        val 取得データ = 実行権限管理検索手続き側リポジトリ.コントローラ情報を収集する(
            コントローラ識別子 = パラメータ.Int値で取得する(引数フィールド名.コントローラ識別子),
            コントローラ名称 = パラメータ.文字列値で取得する(引数フィールド名.コントローラ名称),
            コントローラURLパス = パラメータ.文字列値で取得する(引数フィールド名.コントローラURLパス),
            コントローラDIコンポーネント名 = パラメータ.文字列値で取得する(引数フィールド名.コントローラDIコンポーネント名),
            コントローラクラス名 = パラメータ.文字列値で取得する(引数フィールド名.コントローラクラス名),
            コントローラクラスパッケージパス = パラメータ.文字列値で取得する(引数フィールド名.コントローラクラスパッケージパス),
            コントローラ使用中止 = パラメータ.Boolean値で取得する(引数フィールド名.コントローラ使用中止),
            対応目録存在 = パラメータ.Boolean値で取得する(引数フィールド名.対応目録存在),
            対応目録識別子 = パラメータ.Int値で取得する(引数フィールド名.対応目録識別子),
            対応目録名称 = パラメータ.文字列値で取得する(引数フィールド名.対応目録名称),
            対応目録親目録識別子 = パラメータ.Int値で取得する(引数フィールド名.対応目録親目録識別子),
            対応目録親目録存在 = パラメータ.Boolean値で取得する(引数フィールド名.対応目録親目録存在),
            対応目録親目録名称 = パラメータ.文字列値で取得する(引数フィールド名.対応目録親目録名称),
            更新日時最大値 = パラメータ.文字列値で取得する(共通引数フィールド名.更新日時最大値),
            更新日時最小値 = パラメータ.文字列値で取得する(共通引数フィールド名.更新日時最小値),
            取得件数上限 = 取得件数上限,
            取得開始位置 = 取得開始位置
        )

        var 全体件数: Int? = 取得件数が限定されていれば全体件数を返す(取得件数上限 != null)

        return 戻り値.取得データをセットする(取得データ, 取得開始位置, 全体件数, 取得件数上限)
    }

}