package name.uroak.uroak_service_center.sysad.utils

import name.uroak.uroak_service_center.shared.base.util.手続き処理種別一覧
import name.uroak.uroak_service_center.shared.base.util.手続き処理種別一覧.*

/**
 *
 */
class 権限属性クラス {

    /**
     *
     */
    companion object {
        /***/
        private const val ビット_実行可能 = 0x1

        /***/
        private const val ビット_読込 = 0x2

        /***/
        private const val ビット_登録 = 0x4

        /***/
        private const val ビット_更新_論理削除 = 0x8

        /***/
        private const val ビット_物理削除 = 0x10

        /***/
        private const val ビット_インポート = 0x20

        /***/
        private const val ビット_エクスポート = 0x40

        /**
         *
         */
        @JvmStatic
        fun 権限属性を作成する(): 権限属性クラス {
            return 権限属性クラス()
                .実行可能属性をセットする()
        }

        /**
         *
         */
        @JvmStatic
        fun 実行不可の権限属性を作成する(): 権限属性クラス {
            return 権限属性クラス()
        }

        @JvmStatic
        fun 全ての権限を持つ権限属性を返す(): 権限属性クラス {
            return 権限属性クラス(
                ビット_実行可能
                        or ビット_読込
                        or ビット_登録
                        or ビット_更新_論理削除
                        or ビット_物理削除
                        or ビット_インポート
                        or ビット_エクスポート
            )
        }

        /**
         *
         */
        @JvmStatic
        fun 検索手続き用の権限属性を返す(): 権限属性クラス {
            return 権限属性を作成する()
                .読込属性をセットする()
        }

        /**
         *
         */
        @JvmStatic
        fun 登録更新手続き用の権限属性を返す(): 権限属性クラス {
            return 権限属性を作成する()
                .登録属性をセットする()
                .更新_論理削除属性をセットする()
        }

        /**
         *
         */
        @JvmStatic
        fun 登録更新論理削除手続き用の権限属性を返す(): 権限属性クラス {
            return 登録更新手続き用の権限属性を返す()
        }

        /**
         *
         */
        @JvmStatic
        fun エクスポート手続き用の権限属性を返す(): 権限属性クラス {
            return 権限属性を作成する()
                .エクスポート属性をセットする()
        }

        /**
         *
         */
        @JvmStatic
        fun 登録更新エクスポート手続き用の権限属性を返す(): 権限属性クラス {
            return 登録更新手続き用の権限属性を返す()
                .エクスポート属性をセットする()
        }

        /**
         *
         */
        @JvmStatic
        fun 論理削除手続き用の権限属性を返す(): 権限属性クラス {
            return 権限属性を作成する()
                .更新_論理削除属性をセットする()
        }

        /**
         *
         */
        @JvmStatic
        fun 物理削除手続き用の権限属性を返す(): 権限属性クラス {
            return 権限属性を作成する()
                .物理削除属性をセットする()
        }

        /**
         *
         */
        @JvmStatic
        fun インポート手続き用の権限属性を返す(): 権限属性クラス {
            return 権限属性を作成する()
                .インポート属性をセットする()
        }
    }

    /***/
    private var 権限: Int;

    /**
     *
     */
    constructor() {
        this.権限 = 0
    }

    /**
     *
     */
    constructor(権限: Int) {
        this.権限 = 権限
    }

    /**
     *
     */
    fun 複製する() = 権限属性クラス(this.権限)

    /**
     *
     */
    fun 文字列化する(): String {
        return String.format(
            "〔数値：%d、実行可能：%s、読込：%s、登録：%s、更新_論理削除：%s、物理削除：%s、インポート：%s、エクスポート：%s〕",
            権限,
            実行可能属性があるかチェックする().toString(),
            読込属性があるかチェックする().toString(),
            登録属性があるかチェックする().toString(),
            更新_論理削除属性があるかチェックする().toString(),
            物理削除属性があるかチェックする().toString(),
            インポート属性があるかチェックする().toString(),
            エクスポート属性があるかチェックする().toString()
        )
    }

    /**
     *
     */
    fun 権限値を返す(): Int = 権限

    /**
     * 加算演算子オーバーロード用
     */
    fun plus(権限属性: 権限属性クラス): 権限属性クラス {
        return 権限属性クラス(this.権限 or 権限属性.権限)
    }

    /**
     *
     */
    fun 属性を加算した結果で更新する(権限属性: 権限属性クラス?): 権限属性クラス {
        if (権限属性 != null)
            this.権限 = this.権限 or 権限属性.権限
        return this
    }

    // =================================================================================
    // 権限属性のセット
    // =================================================================================

    /**
     *
     */
    fun 権限値をセットする(権限: Int): 権限属性クラス {
        this.権限 = 権限
        return this
    }

    /**
     *
     */
    fun 実行可能属性をセットする(): 権限属性クラス {
        権限 = 権限 or ビット_実行可能
        return this
    }

    /**
     *
     */
    fun 読込属性をセットする(): 権限属性クラス {
        権限 = 権限 or ビット_読込
        return this
    }

    /**
     *
     */
    fun 登録属性をセットする(): 権限属性クラス {
        権限 = 権限 or ビット_登録
        return this
    }

    /**
     *
     */
    fun 更新_論理削除属性をセットする(): 権限属性クラス {
        権限 = 権限 or ビット_更新_論理削除
        return this
    }

    /**
     *
     */
    fun 物理削除属性をセットする(): 権限属性クラス {
        権限 = 権限 or ビット_物理削除
        return this
    }

    /**
     *
     */
    fun インポート属性をセットする(): 権限属性クラス {
        権限 = 権限 or ビット_インポート
        return this
    }

    /**
     *
     */
    fun エクスポート属性をセットする(): 権限属性クラス {
        権限 = 権限 or ビット_エクスポート
        return this
    }

    // =================================================================================
    // 権限属性の削除
    // =================================================================================

    /**
     *
     */
    fun 実行可能属性を削除する(): 権限属性クラス {
        権限 = 権限 and ビット_実行可能.inv()
        return this
    }

    /**
     *
     */
    fun 読込属性を削除する(): 権限属性クラス {
        権限 = 権限 and ビット_読込.inv()
        return this
    }

    /**
     *
     */
    fun 登録属性を削除する(): 権限属性クラス {
        権限 = 権限 and ビット_登録.inv()
        return this
    }

    /**
     *
     */
    fun 更新_論理削除属性を削除する(): 権限属性クラス {
        権限 = 権限 and ビット_更新_論理削除.inv()
        return this
    }

    /**
     *
     */
    fun 物理削除属性を削除する(): 権限属性クラス {
        権限 = 権限 and ビット_物理削除.inv()
        return this
    }

    /**
     *
     */
    fun インポート属性を削除する(): 権限属性クラス {
        権限 = 権限 and ビット_インポート.inv()
        return this
    }

    /**
     *
     */
    fun エクスポート属性を削除する(): 権限属性クラス {
        権限 = 権限 and ビット_エクスポート.inv()
        return this
    }

    // =================================================================================
    // 権限属性のチェック
    // =================================================================================

    /**
     *
     */
    fun 実行可能属性があるかチェックする(): Boolean {
        return (権限 and ビット_実行可能) != 0
    }

    /**
     *
     */
    fun 読込属性があるかチェックする(): Boolean {
        return (権限 and ビット_読込) != 0
    }

    /**
     *
     */
    fun 登録属性があるかチェックする(): Boolean {
        return (権限 and ビット_登録) != 0
    }

    /**
     *
     */
    fun 更新_論理削除属性があるかチェックする(): Boolean {
        return (権限 and ビット_更新_論理削除) != 0
    }

    /**
     *
     */
    fun 物理削除属性があるかチェックする(): Boolean {
        return (権限 and ビット_物理削除) != 0
    }

    /**
     *
     */
    fun インポート属性があるかチェックする(): Boolean {
        return (権限 and ビット_インポート) != 0
    }

    /**
     *
     */
    fun エクスポート属性があるかチェックする(): Boolean {
        return (権限 and ビット_エクスポート) != 0
    }

    // =================================================================================
    // 権限チェック
    // =================================================================================

    /**
     *
     */
    fun 実行可能かチェックする(手続き処理種別: 手続き処理種別一覧): Boolean {
        return if (!実行可能属性があるかチェックする())
            false
        else
            when (手続き処理種別) {
                検索 -> {
                    読込属性があるかチェックする()
                }
                登録 -> {
                    読込属性があるかチェックする()
                            && 登録属性があるかチェックする()
                }
                更新 -> {
                    読込属性があるかチェックする()
                            && 更新_論理削除属性があるかチェックする()
                }
                登録_更新 -> {
                    読込属性があるかチェックする()
                            && 登録属性があるかチェックする()
                            && 更新_論理削除属性があるかチェックする()
                }
                論理削除 -> {
                    読込属性があるかチェックする()
                            && 更新_論理削除属性があるかチェックする()
                }
                物理削除 -> {
                    読込属性があるかチェックする()
                            && 物理削除属性があるかチェックする()
                }
                インポート -> {
                    読込属性があるかチェックする()
                            && インポート属性があるかチェックする()
                }
                エクスポート -> {
                    読込属性があるかチェックする()
                            && エクスポート属性があるかチェックする()
                }
                その他 -> {
                    true
                }
                未定 -> {
                    false
                }
                不明 -> {
                    false
                }
            }
    }

}