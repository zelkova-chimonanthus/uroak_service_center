package name.uroak.uroak_service_center.shared.base.param

import name.uroak.uroak_service_center.base.constants.リクエストフィールド名
import name.uroak.uroak_service_center.shared.base.util.JSONフィールド名言語一覧
import name.uroak.uroak_service_center.shared.base.util.対象テーブル構成種別一覧
import name.uroak.uroak_service_center.shared.base.util.手続き処理種別一覧
import name.uroak.uroak_service_center.shared.constants.message.メッセージID一覧

/**
 *
 */
class 共通パラメータモードクラス : 手続きパラメータ共通クラス() {
    /***/
    private var 対象テーブル構成: 対象テーブル構成種別一覧 = 対象テーブル構成種別一覧.不明

    /***/
    private var 手続き処理種別: 手続き処理種別一覧 = 手続き処理種別一覧.不明

    /***/
    private var 返信言語種別: JSONフィールド名言語一覧 = JSONフィールド名言語一覧.不明

    /**
     * 対象テーブル構成はパラメータからのみ設定可能とするので、JSON値から以外は設定可能なメソッドは用意しない。
     */
    private fun 対象テーブル構成をセットする(JSONフィールド値: String?) {
        JSONフィールド値 ?: エラーをスローする(
            メッセージID一覧.BAS_E_0010,
            リクエストフィールド名.対象テーブル構成種別.フィールド名を文字列化する()
        )
        val 対象テーブル構成 = 対象テーブル構成種別一覧.JSONフィールド値を列挙定数に変換する(JSONフィールド値)
        if (対象テーブル構成 == 対象テーブル構成種別一覧.不明) {
            エラーをスローする(
                メッセージID一覧.BAS_E_0036,
                リクエストフィールド名.対象テーブル構成種別.フィールド名を文字列化する(),
                JSONフィールド値
            )
        } else {
            対象テーブル構成をセットする(対象テーブル構成)
        }
    }

    /**
     *
     */
    private fun 対象テーブル構成をセットする(対象テーブル構成: 対象テーブル構成種別一覧) {
        this.対象テーブル構成 = 対象テーブル構成
    }

    /**
     * 手続き処理種別は対象テーブル構成が単一の場合はパラメータから設定され、それ以外の場合は手続きメソッドのアノテーションで指定する。
     */
    private fun 手続き処理種別をセットする(マップ: Map<String, Any?>, 対象テーブル構成: 対象テーブル構成種別一覧, JSONフィールド値: String?) {
        if (対象テーブル構成 != 対象テーブル構成種別一覧.単一テーブル) {
            // 「テーブル数限定なし」の場合は、手続きメソッドで指定されたアノテーションで判断するので、ここでは決められない。
            手続き処理種別をセットする(手続き処理種別一覧.未定)
        } else {
            // 「単一テーブル」の場合は、パラメータで処理種別が指定される
            手続き処理種別をセットする(リクエストフィールド名.処理種別.同名のフィールドを文字列値で取得する(マップ))
        }
    }

    /**
     *
     */
    private fun 手続き処理種別をセットする(JSONフィールド値: String?) {
        JSONフィールド値 ?: エラーをスローする(
            メッセージID一覧.BAS_E_0011,
            リクエストフィールド名.処理種別.フィールド名を文字列化する()
        )
        val 手続き処理種別 = 手続き処理種別一覧.JSONフィールド値を列挙定数に変換する(JSONフィールド値)
        if (手続き処理種別 == 手続き処理種別一覧.不明) {
            エラーをスローする(
                メッセージID一覧.BAS_E_0037,
                リクエストフィールド名.対象テーブル構成種別.フィールド名を文字列化する(),
                JSONフィールド値
            )
        } else {
            手続き処理種別をセットする(手続き処理種別)
        }
    }

    /**
     * 手続き処理種別は対象テーブル構成が単一の場合はパラメータから設定され、それ以外の場合は手続きメソッドのアノテーションで指定する。
     */
    fun 手続き処理種別をセットする(手続き処理種別: 手続き処理種別一覧) {
        this.手続き処理種別 = 手続き処理種別
    }

    /**
     *
     */
    private fun 返信言語種別をセットする(JSONフィールド値: String?) {
        if (JSONフィールド値 == null) {
            // 未設定の際のデフォルト値は「英語」
            返信言語種別をセットする(JSONフィールド名言語一覧.英語)
        } else {
            val 返信言語 = JSONフィールド名言語一覧.JSONフィールド値を列挙定数に変換する(JSONフィールド値)
            if (返信言語 == JSONフィールド名言語一覧.不明) {
                エラーをスローする(
                    メッセージID一覧.BAS_E_0038,
                    リクエストフィールド名.返信言語.フィールド名を文字列化する(),
                    JSONフィールド値
                )
            } else {
                返信言語種別をセットする(返信言語)
            }
        }
    }

    /**
     *
     */
    fun 返信言語種別をセットする(返信言語種別: JSONフィールド名言語一覧) {
        this.返信言語種別 = 返信言語種別
    }

    /**
     *
     */
    fun 対象テーブル構成を返す() = 対象テーブル構成

    /**
     *
     */
    fun 手続き処理種別を返す() = 手続き処理種別

    /**
     *
     */
    fun 返信言語種別を返す() = 返信言語種別

    /**
     *
     */
    override fun マップからデータをセットする(マップ: Map<String, Any?>) {

        返信言語種別をセットする(リクエストフィールド名.返信言語.同名のフィールドを文字列値で取得する(マップ))

        対象テーブル構成をセットする(リクエストフィールド名.対象テーブル構成種別.同名のフィールドを文字列値で取得する(マップ))

        手続き処理種別をセットする(マップ, 対象テーブル構成, リクエストフィールド名.処理種別.同名のフィールドを文字列値で取得する(マップ))
    }

    /**
     *
     */
    override fun 解析結果をクリアする() {
        対象テーブル構成 = 対象テーブル構成種別一覧.不明
        手続き処理種別 = 手続き処理種別一覧.不明
    }
}
