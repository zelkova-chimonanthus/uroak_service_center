package name.uroak.uroak_service_center.shared.util.log

import name.uroak.uroak_service_center.shared.base.ret.エラー情報クラス
import name.uroak.uroak_service_center.shared.base.util.手続き実行情報クラス
import name.uroak.uroak_service_center.shared.constants.message.メッセージID一覧
import name.uroak.uroak_service_center.shared.constants.共有定数
import name.uroak.uroak_service_center.shared.error.exception.共通処理エラークラス
import name.uroak.uroak_service_center.shared.util.log.ログ.レベル.*
import org.slf4j.Logger
import org.slf4j.LoggerFactory

/**
 *
 */
object ログ {
    /***/
    private val ロガー: Logger = LoggerFactory.getLogger(ログ::class.java)

    /**「＜出力クラス名＞-【タイトル】：出力メッセージ」*/
    const val ログ書式1 = "＜%s＞-【%s】：%s"

    /**「＜出力クラス名＞：出力メッセージ」*/
    const val ログ書式2 = "＜%s＞：%s"

    /**「　［メッセージ対象項目名］：出力メッセージ」*/
    const val ログ書式3 = "　［%s］：%s"

    /**
     *
     */
    private enum class レベル {
        /***/
        デバグ("Debug"),

        /***/
        情報("Error"),

        /***/
        警告("Warn"),

        /***/
        エラー("Info");

        /***/
        val 名称: String

        /**
         *
         */
        constructor(名称: String) {
            this.名称 = 名称
        }
    }

    fun 手続き開始ログを出力する(ログ出力クラス: Class<Any>, 手続き実行情報: 手続き実行情報クラス) {
        情報ログを出力する(
            ログ出力クラス,
            String.format("※※※※※※　タスクを開始します。タスク名：【%s】", 手続き実行情報.タスク名を返す())
        )
        情報ログを出力する(
            ログ出力クラス,
            String.format(
                "《タスク詳細》==> 利用者【%s】　：：　手続き【%s】",
                手続き実行情報.利用者情報を返す().詳細情報を文字列化する(),
                手続き実行情報.対象手続き情報を返す().詳細情報を文字列化する()
            )
        )
    }

    fun 手続き終了ログを出力する(ログ出力クラス: Class<Any>, 手続き実行情報: 手続き実行情報クラス) {
        情報ログを出力する(
            ログ出力クラス,
            String.format("※※※※※※　タスクを終了します。タスク名：【%s】", 手続き実行情報.タスク名を返す())
        )
    }

    /**
     *メッセージを編集する
     */
    private fun メッセージを編集する(ログ出力クラス: Class<Any>, タイトル: String?, 書式: String, vararg メッセージパラメータ: Any?): String {

        val 出力クラス名 = 共有定数.共通のパッケージ階層を除去したクラス名を返す(ログ出力クラス)

        val 出力メッセージ = String.format(書式, *メッセージパラメータ)

        return if (タイトル != null) {
            String.format(ログ書式1, 出力クラス名, タイトル, 出力メッセージ)
        } else {
            String.format(ログ書式2, 出力クラス名, 出力メッセージ)
        }
    }

    /**
     *メッセージを編集する
     */
    private fun メッセージを編集する(ログ出力クラス: Class<Any>, タイトル: String?, 出力メッセージ: String): String {

        val 出力クラス名 = 共有定数.共通のパッケージ階層を除去したクラス名を返す(ログ出力クラス)

        return if (タイトル != null) {
            String.format(ログ書式1, 出力クラス名, タイトル, 出力メッセージ)
        } else {
            String.format(ログ書式2, 出力クラス名, 出力メッセージ)
        }
    }

    /**
     *メッセージを編集する
     */
    private fun メッセージを編集する(
        ログ出力クラス: Class<Any>,
        タイトル: String?,
        エラー情報: エラー情報クラス?,
        メッセージID: メッセージID一覧?,
        vararg パラメータ: Any?
    ): String {
        return if (エラー情報 == null) {
            if (メッセージID != null) {
                メッセージを編集する(ログ出力クラス, タイトル, メッセージ集積庫.メッセージを編集する(メッセージID, *パラメータ))
            } else {
                throw 共通処理エラークラス(this.javaClass, メッセージID一覧.SHR_E_0020)
            }
        } else {
            メッセージを編集する(ログ出力クラス, タイトル, エラー情報.文字列化する())
        }
    }

    /**
     *
     */
    private fun ログ出力されるログレベルか(ログレベル: レベル): Boolean {
        return when (ログレベル) {
            デバグ -> ロガー.isDebugEnabled
            情報 -> ロガー.isInfoEnabled
            警告 -> ロガー.isWarnEnabled
            エラー -> ロガー.isErrorEnabled
        }
    }

    /**
     *
     */
    fun デバグログは出力されるか() = ログ出力されるログレベルか(レベル.デバグ)

    /**
     *
     */
    fun 情報ログは出力されるか() = ログ出力されるログレベルか(レベル.情報)

    /**
     *
     */
    fun 警告ログは出力されるか() = ログ出力されるログレベルか(レベル.警告)

    /**
     *
     */
    fun エラーログは出力されるか() = ログ出力されるログレベルか(レベル.エラー)

    /**
     *
     */
    private fun 出力する(
        ログレベル: レベル,
        ログ出力クラス: Class<Any>,
        エラーオブジェクト: Throwable?,
        タイトル: String?,
        出力メッセージ: String,
        vararg パラメータ: Any?
    ) {
        if (!ログ出力されるログレベルか(ログレベル)) return
        val メッセージ =
            if (パラメータ == null)
                メッセージを編集する(ログ出力クラス, タイトル, 出力メッセージ)
            else
                メッセージを編集する(ログ出力クラス, タイトル, 出力メッセージ, *パラメータ)
        出力する(ログレベル, ログ出力クラス, エラーオブジェクト, メッセージ)
    }

    /**
     *
     */
    private fun 出力する(
        ログレベル: レベル,
        ログ出力クラス: Class<Any>,
        エラーオブジェクト: Throwable?,
        タイトル: String?,
        エラー情報: エラー情報クラス?,
        メッセージID: メッセージID一覧?,
        vararg パラメータ: Any?
    ) {
        if (!ログ出力されるログレベルか(ログレベル)) {
            return
        }

        val メッセージ = メッセージを編集する(ログ出力クラス, タイトル, エラー情報, メッセージID, *パラメータ)

        出力する(ログレベル, ログ出力クラス, エラーオブジェクト, メッセージ)
    }

    /**
     *
     */
    private fun 出力する(
        ログレベル: レベル,
        ログ出力クラス: Class<Any>,
        エラーオブジェクト: Throwable?,
        メッセージ: String
    ) {
        if (!ログ出力されるログレベルか(ログレベル)) return
        when (ログレベル) {
            デバグ -> {
                if (エラーオブジェクト != null) ロガー.debug(メッセージ, エラーオブジェクト) else ロガー.debug(メッセージ)
            }
            情報 -> {
                if (エラーオブジェクト != null) ロガー.info(メッセージ, エラーオブジェクト) else ロガー.info(メッセージ)
            }
            警告 -> {
                if (エラーオブジェクト != null) ロガー.warn(メッセージ, エラーオブジェクト) else ロガー.warn(メッセージ)
            }
            エラー -> {
                if (エラーオブジェクト != null) ロガー.error(メッセージ, エラーオブジェクト) else ロガー.error(メッセージ)
            }
        }
    }

////////////////////////////////////////

    /**
     *デバグレベルのメッセージを出力する
     */
    fun デバグログを出力する(ログ出力クラス: Class<Any>, タイトル: String?, 書式: String, vararg メッセージパラメータ: Any?) {
        出力する(デバグ, ログ出力クラス, null, タイトル, 書式, *メッセージパラメータ)
    }

    /**
     *情報レベルのメッセージを出力する
     */
    fun 情報ログを出力する(ログ出力クラス: Class<Any>, タイトル: String?, 書式: String, vararg メッセージパラメータ: Any?) {
        出力する(情報, ログ出力クラス, null, タイトル, 書式, *メッセージパラメータ)
    }

////////////////////////////////////////

    /**
     *デバグレベルのメッセージを出力する
     */
    fun デバグログを出力する(ログ出力クラス: Class<Any>, エラー情報: エラー情報クラス) {
        出力する(デバグ, ログ出力クラス, null, null, エラー情報, null, null)
    }

    /**
     *情報レベルのメッセージを出力する
     */
    fun 情報ログを出力する(ログ出力クラス: Class<Any>, エラー情報: エラー情報クラス) {
        出力する(情報, ログ出力クラス, null, null, エラー情報, null, null)
    }

    /**
     *警告レベルのメッセージを出力する
     */
    fun 警告ログを出力する(ログ出力クラス: Class<Any>, エラー情報: エラー情報クラス) {
        出力する(警告, ログ出力クラス, null, null, エラー情報, null, null)
    }

    /**
     *エラーレベルのメッセージを出力する
     */
    fun エラーログを出力する(ログ出力クラス: Class<Any>, エラー情報: エラー情報クラス) {
        出力する(エラー, ログ出力クラス, null, null, エラー情報, null, null)
    }

////////////////////////////////////////

    /**
     *デバグレベルのメッセージを出力する
     */
    fun デバグログを出力する(ログ出力クラス: Class<Any>, タイトル: String, エラー情報: エラー情報クラス) {
        出力する(デバグ, ログ出力クラス, null, タイトル, エラー情報, null, null)
    }

    /**
     *情報レベルのメッセージを出力する
     */
    fun 情報ログを出力する(ログ出力クラス: Class<Any>, タイトル: String, エラー情報: エラー情報クラス) {
        出力する(情報, ログ出力クラス, null, タイトル, エラー情報, null, null)
    }

    /**
     *警告レベルのメッセージを出力する
     */
    fun 警告ログを出力する(ログ出力クラス: Class<Any>, タイトル: String, エラー情報: エラー情報クラス) {
        出力する(警告, ログ出力クラス, null, タイトル, エラー情報, null, null)
    }

    /**
     *エラーレベルのメッセージを出力する
     */
    fun エラーログを出力する(ログ出力クラス: Class<Any>, タイトル: String, エラー情報: エラー情報クラス) {
        出力する(エラー, ログ出力クラス, null, タイトル, エラー情報, null, null)
    }

////////////////////////////////////////

    /**
     *デバグレベルのメッセージを出力する
     */
    fun デバグログを出力する(ログ出力クラス: Class<Any>, メッセージID: メッセージID一覧) {
        出力する(デバグ, ログ出力クラス, null, null, null, メッセージID, null)
    }

    /**
     *情報レベルのメッセージを出力する
     */
    fun 情報ログを出力する(ログ出力クラス: Class<Any>, メッセージID: メッセージID一覧) {
        出力する(情報, ログ出力クラス, null, null, null, メッセージID, null)
    }

    /**
     *警告レベルのメッセージを出力する
     */
    fun 警告ログを出力する(ログ出力クラス: Class<Any>, メッセージID: メッセージID一覧) {
        出力する(警告, ログ出力クラス, null, null, null, メッセージID, null)
    }

    /**
     *エラーレベルのメッセージを出力する
     */
    fun エラーログを出力する(ログ出力クラス: Class<Any>, メッセージID: メッセージID一覧) {
        出力する(エラー, ログ出力クラス, null, null, null, メッセージID, null)
    }

////////////////////////////////////////

    /**
     *デバグレベルのメッセージを出力する
     */
    fun デバグログを出力する(ログ出力クラス: Class<Any>, メッセージID: メッセージID一覧, vararg パラメータ: Any?) {
        出力する(デバグ, ログ出力クラス, null, null, null, メッセージID, *パラメータ)
    }

    /**
     *情報レベルのメッセージを出力する
     */
    fun 情報ログを出力する(ログ出力クラス: Class<Any>, メッセージID: メッセージID一覧, vararg パラメータ: Any?) {
        出力する(情報, ログ出力クラス, null, null, null, メッセージID, *パラメータ)
    }

    /**
     *警告レベルのメッセージを出力する
     */
    fun 警告ログを出力する(ログ出力クラス: Class<Any>, メッセージID: メッセージID一覧, vararg パラメータ: Any?) {
        出力する(警告, ログ出力クラス, null, null, null, メッセージID, *パラメータ)
    }

    /**
     *エラーレベルのメッセージを出力する
     */
    fun エラーログを出力する(ログ出力クラス: Class<Any>, メッセージID: メッセージID一覧, vararg パラメータ: Any?) {
        出力する(エラー, ログ出力クラス, null, null, null, メッセージID, *パラメータ)
    }

////////////////////////////////////////

    /**
     *デバグレベルのメッセージを出力する
     */
    fun デバグログを出力する(ログ出力クラス: Class<Any>, エラーオブジェクト: Throwable, メッセージID: メッセージID一覧, vararg パラメータ: Any?) {
        出力する(デバグ, ログ出力クラス, エラーオブジェクト, null, null, メッセージID, *パラメータ)
    }

    /**
     *情報レベルのメッセージを出力する
     */
    fun 情報ログを出力する(ログ出力クラス: Class<Any>, エラーオブジェクト: Throwable, メッセージID: メッセージID一覧, vararg パラメータ: Any?) {
        出力する(情報, ログ出力クラス, エラーオブジェクト, null, null, メッセージID, *パラメータ)
    }

    /**
     *警告レベルのメッセージを出力する
     */
    fun 警告ログを出力する(ログ出力クラス: Class<Any>, エラーオブジェクト: Throwable, メッセージID: メッセージID一覧, vararg パラメータ: Any?) {
        出力する(警告, ログ出力クラス, エラーオブジェクト, null, null, メッセージID, *パラメータ)
    }

    /**
     *エラーレベルのメッセージを出力する
     */
    fun エラーログを出力する(ログ出力クラス: Class<Any>, エラーオブジェクト: Throwable, メッセージID: メッセージID一覧, vararg パラメータ: Any?) {
        出力する(エラー, ログ出力クラス, エラーオブジェクト, null, null, メッセージID, *パラメータ)
    }

////////////////////////////////////////

    /**
     *デバグレベルのメッセージを出力する
     */
    fun デバグログを出力する(ログ出力クラス: Class<Any>, タイトル: String, メッセージID: メッセージID一覧) {
        出力する(デバグ, ログ出力クラス, null, タイトル, null, メッセージID, null)
    }

    /**
     *情報レベルのメッセージを出力する
     */
    fun 情報ログを出力する(ログ出力クラス: Class<Any>, タイトル: String, メッセージID: メッセージID一覧) {
        出力する(情報, ログ出力クラス, null, タイトル, null, メッセージID, null)
    }

    /**
     *警告レベルのメッセージを出力する
     */
    fun 警告ログを出力する(ログ出力クラス: Class<Any>, タイトル: String, メッセージID: メッセージID一覧) {
        出力する(警告, ログ出力クラス, null, タイトル, null, メッセージID, null)
    }

    /**
     *エラーレベルのメッセージを出力する
     */
    fun エラーログを出力する(ログ出力クラス: Class<Any>, タイトル: String, メッセージID: メッセージID一覧) {
        出力する(エラー, ログ出力クラス, null, タイトル, null, メッセージID, null)
    }

////////////////////////////////////////

    /**
     *デバグレベルのメッセージを出力する
     */
    fun デバグログを出力する(ログ出力クラス: Class<Any>, タイトル: String, メッセージID: メッセージID一覧, vararg パラメータ: Any?) {
        出力する(デバグ, ログ出力クラス, null, タイトル, null, メッセージID, *パラメータ)
    }

    /**
     *情報レベルのメッセージを出力する
     */
    fun 情報ログを出力する(ログ出力クラス: Class<Any>, タイトル: String, メッセージID: メッセージID一覧, vararg パラメータ: Any?) {
        出力する(情報, ログ出力クラス, null, タイトル, null, メッセージID, *パラメータ)
    }

    /**
     *警告レベルのメッセージを出力する
     */
    fun 警告ログを出力する(ログ出力クラス: Class<Any>, タイトル: String, メッセージID: メッセージID一覧, vararg パラメータ: Any?) {
        出力する(警告, ログ出力クラス, null, タイトル, null, メッセージID, *パラメータ)
    }

    /**
     *エラーレベルのメッセージを出力する
     */
    fun エラーログを出力する(ログ出力クラス: Class<Any>, タイトル: String, メッセージID: メッセージID一覧, vararg パラメータ: Any?) {
        出力する(エラー, ログ出力クラス, null, タイトル, null, メッセージID, *パラメータ)
    }

////////////////////////////////////////

    /**
     *デバグレベルのメッセージを出力する
     */
    fun デバグログを出力する(
        ログ出力クラス: Class<Any>,
        エラーオブジェクト: Throwable,
        タイトル: String,
        メッセージID: メッセージID一覧,
        vararg パラメータ: Any?
    ) {
        出力する(デバグ, ログ出力クラス, エラーオブジェクト, タイトル, null, メッセージID, *パラメータ)
    }

    /**
     *情報レベルのメッセージを出力する
     */
    fun 情報ログを出力する(
        ログ出力クラス: Class<Any>,
        エラーオブジェクト: Throwable,
        タイトル: String,
        メッセージID: メッセージID一覧,
        vararg パラメータ: Any?
    ) {
        出力する(情報, ログ出力クラス, エラーオブジェクト, タイトル, null, メッセージID, *パラメータ)
    }

    /**
     *警告レベルのメッセージを出力する
     */
    fun 警告ログを出力する(
        ログ出力クラス: Class<Any>,
        エラーオブジェクト: Throwable,
        タイトル: String,
        メッセージID: メッセージID一覧,
        vararg パラメータ: Any?
    ) {
        出力する(警告, ログ出力クラス, エラーオブジェクト, タイトル, null, メッセージID, *パラメータ)
    }

    /**
     *エラーレベルのメッセージを出力する
     */
    fun エラーログを出力する(
        ログ出力クラス: Class<Any>,
        エラーオブジェクト: Throwable,
        タイトル: String,
        メッセージID: メッセージID一覧,
        vararg パラメータ: Any?
    ) {
        出力する(エラー, ログ出力クラス, エラーオブジェクト, タイトル, null, メッセージID, *パラメータ)
    }

////////////////////////////////////////

    /**
     *デバグレベルのメッセージを出力する
     */
    fun デバグログを出力する(
        ログ出力クラス: Class<Any>,
        エラーオブジェクト: Throwable,
        タイトル: String,
        メッセージID: メッセージID一覧
    ) {
        出力する(デバグ, ログ出力クラス, エラーオブジェクト, タイトル, null, メッセージID, null)
    }

    /**
     *情報レベルのメッセージを出力する
     */
    fun 情報ログを出力する(
        ログ出力クラス: Class<Any>,
        エラーオブジェクト: Throwable,
        タイトル: String,
        メッセージID: メッセージID一覧
    ) {
        出力する(情報, ログ出力クラス, エラーオブジェクト, タイトル, null, メッセージID, null)
    }

    /**
     *警告レベルのメッセージを出力する
     */
    fun 警告ログを出力する(
        ログ出力クラス: Class<Any>,
        エラーオブジェクト: Throwable,
        タイトル: String,
        メッセージID: メッセージID一覧
    ) {
        出力する(警告, ログ出力クラス, エラーオブジェクト, タイトル, null, メッセージID, null)
    }

    /**
     *エラーレベルのメッセージを出力する
     */
    fun エラーログを出力する(
        ログ出力クラス: Class<Any>,
        エラーオブジェクト: Throwable,
        タイトル: String,
        メッセージID: メッセージID一覧
    ) {
        出力する(エラー, ログ出力クラス, エラーオブジェクト, タイトル, null, メッセージID, null)
    }

////////////////////////////////////////

    /**
     *デバグレベルのメッセージを出力する
     */
    fun デバグログを出力する(ログ出力クラス: Class<Any>, エラーオブジェクト: Throwable?, タイトル: String?, 出力メッセージ: String) {
        出力する(デバグ, ログ出力クラス, エラーオブジェクト, タイトル, 出力メッセージ)
    }

    /**
     *情報レベルのメッセージを出力する
     */
    fun 情報ログを出力する(ログ出力クラス: Class<Any>, エラーオブジェクト: Throwable?, タイトル: String?, 出力メッセージ: String) {
        出力する(情報, ログ出力クラス, エラーオブジェクト, タイトル, 出力メッセージ)
    }

    /**
     *警告レベルのメッセージを出力する
     */
    fun 警告ログを出力する(ログ出力クラス: Class<Any>, エラーオブジェクト: Throwable?, タイトル: String?, 出力メッセージ: String) {
        出力する(警告, ログ出力クラス, エラーオブジェクト, タイトル, 出力メッセージ)
    }

    /**
     *エラーレベルのメッセージを出力する
     */
    fun エラーログを出力する(ログ出力クラス: Class<Any>, エラーオブジェクト: Throwable?, タイトル: String?, 出力メッセージ: String) {
        出力する(エラー, ログ出力クラス, エラーオブジェクト, タイトル, 出力メッセージ)
    }

////////////////////////////////////////

    /**
     *デバグレベルのメッセージを出力する
     */
    fun デバグログを出力する(ログ出力クラス: Class<Any>, エラーオブジェクト: Throwable?, 出力メッセージ: String) {
        出力する(デバグ, ログ出力クラス, エラーオブジェクト, タイトル = null, 出力メッセージ)
    }

    /**
     *情報レベルのメッセージを出力する
     */
    fun 情報ログを出力する(ログ出力クラス: Class<Any>, エラーオブジェクト: Throwable?, 出力メッセージ: String) {
        出力する(情報, ログ出力クラス, エラーオブジェクト, タイトル = null, 出力メッセージ)
    }

    /**
     *警告レベルのメッセージを出力する
     */
    fun 警告ログを出力する(ログ出力クラス: Class<Any>, エラーオブジェクト: Throwable?, 出力メッセージ: String) {
        出力する(警告, ログ出力クラス, エラーオブジェクト, タイトル = null, 出力メッセージ)
    }

    /**
     *エラーレベルのメッセージを出力する
     */
    fun エラーログを出力する(ログ出力クラス: Class<Any>, エラーオブジェクト: Throwable?, 出力メッセージ: String) {
        出力する(エラー, ログ出力クラス, エラーオブジェクト, タイトル = null, 出力メッセージ)
    }

////////////////////////////////////////

    /**
     *デバグレベルのメッセージを出力する
     */
    fun デバグログを出力する(ログ出力クラス: Class<Any>, タイトル: String?, 出力メッセージ: String) {
        出力する(デバグ, ログ出力クラス, エラーオブジェクト = null, タイトル, 出力メッセージ)
    }

    /**
     *情報レベルのメッセージを出力する
     */
    fun 情報ログを出力する(ログ出力クラス: Class<Any>, タイトル: String?, 出力メッセージ: String) {
        出力する(情報, ログ出力クラス, エラーオブジェクト = null, タイトル, 出力メッセージ)
    }

    /**
     *警告レベルのメッセージを出力する
     */
    fun 警告ログを出力する(ログ出力クラス: Class<Any>, タイトル: String?, 出力メッセージ: String) {
        出力する(警告, ログ出力クラス, エラーオブジェクト = null, タイトル, 出力メッセージ)
    }

    /**
     *エラーレベルのメッセージを出力する
     */
    fun エラーログを出力する(ログ出力クラス: Class<Any>, タイトル: String?, 出力メッセージ: String) {
        出力する(エラー, ログ出力クラス, エラーオブジェクト = null, タイトル, 出力メッセージ)
    }

////////////////////////////////////////

    /**
     *デバグレベルのメッセージを出力する
     */
    fun デバグログを出力する(ログ出力クラス: Class<Any>, 出力メッセージ: String) {
        出力する(デバグ, ログ出力クラス, エラーオブジェクト = null, タイトル = null, 出力メッセージ)
    }

    /**
     *情報レベルのメッセージを出力する
     */
    fun 情報ログを出力する(ログ出力クラス: Class<Any>, 出力メッセージ: String) {
        出力する(情報, ログ出力クラス, エラーオブジェクト = null, タイトル = null, 出力メッセージ)
    }

    /**
     *警告レベルのメッセージを出力する
     */
    fun 警告ログを出力する(ログ出力クラス: Class<Any>, 出力メッセージ: String) {
        出力する(警告, ログ出力クラス, エラーオブジェクト = null, タイトル = null, 出力メッセージ)
    }

    /**
     *エラーレベルのメッセージを出力する
     */
    fun エラーログを出力する(ログ出力クラス: Class<Any>, 出力メッセージ: String) {
        出力する(エラー, ログ出力クラス, エラーオブジェクト = null, タイトル = null, 出力メッセージ)
    }

////////////////////////////////////////


}