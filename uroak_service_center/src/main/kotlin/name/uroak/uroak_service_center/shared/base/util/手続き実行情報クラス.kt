package name.uroak.uroak_service_center.shared.base.util

import name.uroak.uroak_service_center.shared.base.execution.手続きパスクラス
import name.uroak.uroak_service_center.shared.base.param.単一テーブル用パラメータデータクラス
import name.uroak.uroak_service_center.shared.base.param.手続きパラメータクラス
import name.uroak.uroak_service_center.shared.base.param.手続きパラメータ共通クラス
import name.uroak.uroak_service_center.shared.base.param.汎用パラメータデータクラス
import name.uroak.uroak_service_center.shared.base.util.対象テーブル構成種別一覧.*
import name.uroak.uroak_service_center.shared.util.execution.パラメータセットの容器を用意する
import name.uroak.uroak_service_center.shared.util.execution.パラメータセットクラス
import name.uroak.uroak_service_center.sysad.services.実行権限チェックサービスクラス

/**
 *
 */
class 手続き実行情報クラス {

    /**リクエストパラメータ*/
    private var 手続きパラメータ: 手続きパラメータクラス = 手続きパラメータクラス()

    /**リクエストを送信してきた会員のデータ*/
    private var 利用者情報: 会員情報クラス = 会員情報クラス()

    /**実行対象となる手続きのデータ*/
    private var 対象手続き情報: 手続き情報クラス = 手続き情報クラス()

    /**個別にパラメータを用意したい場合に使用する*/
    private var 個別パラメータセット: パラメータセットクラス = パラメータセットの容器を用意する()

    /***/
    private var タスク名: String = ""

    /**
     *
     */
    constructor()

    /**
     *
     */
    fun タスク名をセットする() {
        タスク名 = String.format("%s（ユーザ：[%s, %s], 手続き：[%s]）",
            対象手続き情報.手続き名称を返す(),
            利用者情報.会員名称を返す(),
            利用者情報.会員の識別トークンを返す(),
            対象手続き情報.手続きパスを文字列化する())
    }

    /**
     * 内部データも含まれているので、ログ出力のみにして、レスポンスには出力しないこと。
     */
    fun タスク名を返す(): String {
        return タスク名
    }

    /**
     *
     */
    fun 対象手続き情報を作成する(対象手続き情報: 手続き情報クラス) {
        this.対象手続き情報 = 対象手続き情報
    }

    /**
     *
     */
    fun 利用者情報をセットする(利用者情報: 会員情報クラス) {
        this.利用者情報 = 利用者情報
    }

    /**
     *
     */
    fun POSTデータをセットする(POSTデータ: String?) {
        手続きパラメータ.POSTデータをセットして解析する(POSTデータ)
    }

    /**
     * 利用者から手続きのパラメータとして渡されたパラメータセットを返す
     * 対象テーブル構成種別により2種類あるパラメータセットが含まれている。
     */
    fun 手続きパラメータオブジェクトを返す() = 手続きパラメータ

    /**
     *
     */
    protected fun 手続きパラメータデータを返す(): 手続きパラメータ共通クラス? {
        return when (手続きパラメータ.対象テーブル構成を返す()) {
            単一テーブル -> 手続きパラメータ.単一テーブル用パラメータデータを返す()
            テーブル数限定なし -> 手続きパラメータ.汎用パラメータデータを返す()
            不明 -> null
        }
    }

    /**
     *
     */
    fun 単一テーブル用手続きパラメータを返す() = 手続きパラメータデータを返す() as 単一テーブル用パラメータデータクラス

    /**
     *
     */
    fun 単一テーブル用CSVデータを返す() = 単一テーブル用手続きパラメータを返す()?.単一テーブル用CSVデータを返す()

    /**
     *
     */
    fun 単一テーブル用条件パラメータを返す() = 単一テーブル用手続きパラメータを返す()?.単一テーブル用条件を返す()

    /**
     *
     */
    fun 単一テーブル用返却項目パラメータを返す() = 単一テーブル用手続きパラメータを返す()?.単一テーブル用返却項目設定を返す()

    /**
     *
     */
    fun 単一テーブル用登録更新項目パラメータを返す() = 単一テーブル用手続きパラメータを返す()?.単一テーブル用登録更新項目設定を返す()

    /**
     *
     */
    fun 単一テーブル用テーブル名を返す() = 単一テーブル用手続きパラメータを返す()?.テーブル名を返す()

    /**
     *
     */
    fun 汎用手続きパラメータを返す() = 手続きパラメータデータを返す() as 汎用パラメータデータクラス

    /**
     *
     */
    fun 汎用手続き用条件パラメータを返す() = 汎用手続きパラメータを返す()?.条件パラメータを返す()?.条件パラメータを返す()

    /**
     *
     */
    fun 汎用手続き用登録更新パラメータを返す() = 汎用手続きパラメータを返す()?.登録更新パラメータを返す()?.入力パラメータを返す()

    /**
     *
     */
    fun 汎用手続き用CSVデータを返す() = 汎用手続きパラメータを返す()?.CSVデータを返す()

    /**
     *
     */
    fun 利用者情報を返す() = 利用者情報

    /**
     *
     */
    fun 対象手続き情報を返す() = 対象手続き情報

    /**
     * 個別に用意したパラメータセットを返す
     */
    fun 個別パラメータセットを返す() = 個別パラメータセット

    /**
     *
     */
    fun 対象テーブル構成を返す() = 手続きパラメータ.対象テーブル構成を返す()

    /**
     *
     */
    fun 手続き処理種別を返す() = 手続きパラメータ.手続き処理種別を返す()

    /**
     *
     */
    fun 返信言語種別を返す() = 手続きパラメータ.返信言語種別を返す()

    /**
     * 手続き処理種別はパラメータで指定する場合と手続きメソッドのアノテーションで指定する場合の2つのパターンがある。
     * 対象テーブル構成が「単一テーブル」の場合は前者、それ以外は後者となる。
     * 当メソッドは、後者の場合に、処理種別をセットするために用意されたメソッドとなる。
     */
    fun 手続き処理種別を調整する(手続きメソッドデータ: 手続きメソッドデータクラス) {
        val 対象テーブル構成 = 手続きパラメータ.対象テーブル構成を返す()
        val 手続き処理種別 = 手続きパラメータ.手続き処理種別を返す()

        if (対象テーブル構成 != 単一テーブル && 手続き処理種別 == 手続き処理種別一覧.未定) {
            手続きパラメータ.手続き処理種別をセットする(手続きメソッドデータ.処理種別)
        }
    }

    /**
     *
     */
    fun コントローラ情報を返す() = 対象手続き情報.コントローラ情報を返す()

    /**
     *
     */
    fun 手続きパスを返す() = 対象手続き情報.手続きパスを返す()

    /**
     *
     */
    fun コントローラ名称を返す() = 対象手続き情報.コントローラ名称を返す()

    /**
     *
     */
    fun コントローラ目録名称を返す() = 対象手続き情報.コントローラ目録名称を返す()

    /**
     *
     */
    fun コントローラURLパスを返す() = 対象手続き情報.コントローラURLパスを返す()


    /**
     *
     */
    fun 利用者の名称を返す() = 利用者情報.会員名称を返す()

    /**
     *
     */
    fun 利用者の所属する目録名称を返す() = 利用者情報.会員の親目録名称を返す()
}