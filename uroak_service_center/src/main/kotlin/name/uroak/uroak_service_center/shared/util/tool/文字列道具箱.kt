package name.uroak.uroak_service_center.shared.util.tool

import name.uroak.uroak_service_center.shared.constants.message.メッセージID一覧
import name.uroak.uroak_service_center.shared.error.exception.共通処理エラークラス

/**
 *
 */
object 文字列道具箱 {
    const val 半角カタカナ濁音記号 = '\uff9e'
    const val 半角カタカナ半濁音記号 = '\uff9f'
    const val 全角カタカナ濁音記号 = '\u3099'
    const val 全角カタカナ半濁音記号 = '\u309a'

    const val 半角スペース = '\u0020'
    const val 全角スペース = '\u3000'

    const val 下線 = '\u005f'

    private val 空白属性文字セット = mutableSetOf<Char>()
    private val 半角カタカナ_全角カタカナ変換マップ = mutableMapOf<Char, Char>()
    private val 半角カタカナ_全角カタカナ変換マップ_濁音のみ = mutableMapOf<Char, Char>()
    private val 半角カタカナ_全角カタカナ変換マップ_半濁音のみ = mutableMapOf<Char, Char>()
    private val 全角カタカナ_半角カタカナ変換マップ = mutableMapOf<Char, String>()

    init {
        空白属性文字セット.add('\n') // 改行（line feed）
        空白属性文字セット.add('\r') // 改行（carriage return）
        空白属性文字セット.add('\u0009') // 水平タブ
        空白属性文字セット.add('\u000b') // 垂直タブ
        空白属性文字セット.add('\u000c') // 改ページ
        空白属性文字セット.add('\u001c') // file separator
        空白属性文字セット.add('\u001d') // group separator
        空白属性文字セット.add('\u001e') // record seprator
        空白属性文字セット.add('\u001f') // unit separator
        空白属性文字セット.add(半角スペース) // 半角スペース
        空白属性文字セット.add('\u00a0') // no-break space
        空白属性文字セット.add('\u1680') // ogham space mark
        空白属性文字セット.add('\u180e') // mongolian vowel separator
        空白属性文字セット.add('\u2000') // en quad
        空白属性文字セット.add('\u2001') // em quad
        空白属性文字セット.add('\u2002') // en space
        空白属性文字セット.add('\u2003') // em space
        空白属性文字セット.add('\u2004') // 3-per-em space
        空白属性文字セット.add('\u2005') // 4-per-em space
        空白属性文字セット.add('\u2006') // 6-per-em space
        空白属性文字セット.add('\u2007') // figure space
        空白属性文字セット.add('\u2008') // punctuation space
        空白属性文字セット.add('\u2009') // thin space
        空白属性文字セット.add('\u200a') // hair space
        空白属性文字セット.add('\u200b') // 0 width space
        空白属性文字セット.add('\u202f') // narrow no-break space
        空白属性文字セット.add('\u205f') // medium mathematical space
        空白属性文字セット.add(全角スペース) // 全角スペース
        空白属性文字セット.add('\ufeff') // 0 width no-break space

        半角カタカナ_全角カタカナ変換マップ['\uFF61'] = '\u3002'    // ｡ → 。
        半角カタカナ_全角カタカナ変換マップ['\uFF62'] = '\u300C'    // ｢ → 「
        半角カタカナ_全角カタカナ変換マップ['\uFF63'] = '\u300D'    // ｣ → 」
        半角カタカナ_全角カタカナ変換マップ['\uFF64'] = '\u3001'    // ､ → 、
        半角カタカナ_全角カタカナ変換マップ['\uFF65'] = '\u30FB'    // ･ → ・
        半角カタカナ_全角カタカナ変換マップ['\uFF66'] = '\u30F2'    // ｦ → ヲ
        半角カタカナ_全角カタカナ変換マップ['\uFF67'] = '\u30A1'    // ｧ → ァ
        半角カタカナ_全角カタカナ変換マップ['\uFF68'] = '\u30A3'    // ｨ → ィ
        半角カタカナ_全角カタカナ変換マップ['\uFF69'] = '\u30A5'    // ｩ → ゥ
        半角カタカナ_全角カタカナ変換マップ['\uFF6A'] = '\u30A7'    // ｪ → ェ
        半角カタカナ_全角カタカナ変換マップ['\uFF6B'] = '\u30A9'    // ｫ → ォ
        半角カタカナ_全角カタカナ変換マップ['\uFF6C'] = '\u30E3'    // ｬ → ャ
        半角カタカナ_全角カタカナ変換マップ['\uFF6D'] = '\u30E5'    // ｭ → ュ
        半角カタカナ_全角カタカナ変換マップ['\uFF6E'] = '\u30E7'    // ｮ → ョ
        半角カタカナ_全角カタカナ変換マップ['\uFF6F'] = '\u30C3'    // ｯ → ッ
        半角カタカナ_全角カタカナ変換マップ['\uFF70'] = '\u30FC'    // ｰ → ー
        半角カタカナ_全角カタカナ変換マップ['\uFF71'] = '\u30A2'    // ｱ → ア
        半角カタカナ_全角カタカナ変換マップ['\uFF72'] = '\u30A4'    // ｲ → イ
        半角カタカナ_全角カタカナ変換マップ['\uFF73'] = '\u30A6'    // ｳ → ウ
        半角カタカナ_全角カタカナ変換マップ['\uFF74'] = '\u30A8'    // ｴ → エ
        半角カタカナ_全角カタカナ変換マップ['\uFF75'] = '\u30AA'    // ｵ → オ
        半角カタカナ_全角カタカナ変換マップ['\uFF76'] = '\u30AB'    // ｶ → カ
        半角カタカナ_全角カタカナ変換マップ['\uFF77'] = '\u30AD'    // ｷ → キ
        半角カタカナ_全角カタカナ変換マップ['\uFF78'] = '\u30AF'    // ｸ → ク
        半角カタカナ_全角カタカナ変換マップ['\uFF79'] = '\u30B1'    // ｹ → ケ
        半角カタカナ_全角カタカナ変換マップ['\uFF7A'] = '\u30B3'    // ｺ → コ
        半角カタカナ_全角カタカナ変換マップ['\uFF7B'] = '\u30B5'    // ｻ → サ
        半角カタカナ_全角カタカナ変換マップ['\uFF7C'] = '\u30B7'    // ｼ → シ
        半角カタカナ_全角カタカナ変換マップ['\uFF7D'] = '\u30B9'    // ｽ → ス
        半角カタカナ_全角カタカナ変換マップ['\uFF7E'] = '\u30BB'    // ｾ → セ
        半角カタカナ_全角カタカナ変換マップ['\uFF7F'] = '\u30BD'    // ｿ → ソ
        半角カタカナ_全角カタカナ変換マップ['\uFF80'] = '\u30BF'    // ﾀ → タ
        半角カタカナ_全角カタカナ変換マップ['\uFF81'] = '\u30C1'    // ﾁ → チ
        半角カタカナ_全角カタカナ変換マップ['\uFF82'] = '\u30C4'    // ﾂ → ツ
        半角カタカナ_全角カタカナ変換マップ['\uFF83'] = '\u30C6'    // ﾃ → テ
        半角カタカナ_全角カタカナ変換マップ['\uFF84'] = '\u30C8'    // ﾄ → ト
        半角カタカナ_全角カタカナ変換マップ['\uFF85'] = '\u30CA'    // ﾅ → ナ
        半角カタカナ_全角カタカナ変換マップ['\uFF86'] = '\u30CB'    // ﾆ → ニ
        半角カタカナ_全角カタカナ変換マップ['\uFF87'] = '\u30CC'    // ﾇ → ヌ
        半角カタカナ_全角カタカナ変換マップ['\uFF88'] = '\u30CD'    // ﾈ → ネ
        半角カタカナ_全角カタカナ変換マップ['\uFF89'] = '\u30CE'    // ﾉ → ノ
        半角カタカナ_全角カタカナ変換マップ['\uFF8A'] = '\u30CF'    // ﾊ → ハ
        半角カタカナ_全角カタカナ変換マップ['\uFF8B'] = '\u30D2'    // ﾋ → ヒ
        半角カタカナ_全角カタカナ変換マップ['\uFF8C'] = '\u30D5'    // ﾌ → フ
        半角カタカナ_全角カタカナ変換マップ['\uFF8D'] = '\u30D8'    // ﾍ → ヘ
        半角カタカナ_全角カタカナ変換マップ['\uFF8E'] = '\u30DB'    // ﾎ → ホ
        半角カタカナ_全角カタカナ変換マップ['\uFF8F'] = '\u30DE'    // ﾏ → マ
        半角カタカナ_全角カタカナ変換マップ['\uFF90'] = '\u30DF'    // ﾐ → ミ
        半角カタカナ_全角カタカナ変換マップ['\uFF91'] = '\u30E0'    // ﾑ → ム
        半角カタカナ_全角カタカナ変換マップ['\uFF92'] = '\u30E1'    // ﾒ → メ
        半角カタカナ_全角カタカナ変換マップ['\uFF93'] = '\u30E2'    // ﾓ → モ
        半角カタカナ_全角カタカナ変換マップ['\uFF94'] = '\u30E4'    // ﾔ → ヤ
        半角カタカナ_全角カタカナ変換マップ['\uFF95'] = '\u30E6'    // ﾕ → ユ
        半角カタカナ_全角カタカナ変換マップ['\uFF96'] = '\u30E8'    // ﾖ → ヨ
        半角カタカナ_全角カタカナ変換マップ['\uFF97'] = '\u30E9'    // ﾗ → ラ
        半角カタカナ_全角カタカナ変換マップ['\uFF98'] = '\u30EA'    // ﾘ → リ
        半角カタカナ_全角カタカナ変換マップ['\uFF99'] = '\u30EB'    // ﾙ → ル
        半角カタカナ_全角カタカナ変換マップ['\uFF9A'] = '\u30EC'    // ﾚ → レ
        半角カタカナ_全角カタカナ変換マップ['\uFF9B'] = '\u30ED'    // ﾛ → ロ
        半角カタカナ_全角カタカナ変換マップ['\uFF9C'] = '\u30EF'    // ﾜ → ワ
        半角カタカナ_全角カタカナ変換マップ['\uFF9D'] = '\u30F3'    // ﾝ → ン

        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF76'] = '\u30AC'    // ｶ → ガ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF77'] = '\u30AE'    // ｷ → ギ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF78'] = '\u30B0'    // ｸ → グ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF79'] = '\u30B2'    // ｹ → ゲ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF7A'] = '\u30B4'    // ｺ → ゴ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF7B'] = '\u30B6'    // ｻ → ザ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF7C'] = '\u30B8'    // ｼ → ジ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF7D'] = '\u30BA'    // ｽ → ズ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF7E'] = '\u30BC'    // ｾ → ゼ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF7F'] = '\u30BE'    // ｿ → ゾ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF80'] = '\u30C0'    // ﾀ → ダ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF81'] = '\u30C2'    // ﾁ → ヂ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF82'] = '\u30C5'    // ﾂ → ヅ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF83'] = '\u30C7'    // ﾃ → デ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF84'] = '\u30C9'    // ﾄ → ド
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF8A'] = '\u30D0'    // ﾊ → バ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF8B'] = '\u30D3'    // ﾋ → ビ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF8C'] = '\u30D6'    // ﾌ → ブ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF8D'] = '\u30D9'    // ﾍ → ベ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF8E'] = '\u30DC'    // ﾎ → ボ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF73'] = '\u30F4'    // ｳ → ヴ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF9C'] = '\u30F7'    // ﾜ → ヷ
        半角カタカナ_全角カタカナ変換マップ_濁音のみ['\uFF66'] = '\u30FA'    // ｦ → ヺ

        半角カタカナ_全角カタカナ変換マップ_半濁音のみ['\uFF8A'] = '\u30D1'    // ﾊ → パ
        半角カタカナ_全角カタカナ変換マップ_半濁音のみ['\uFF8B'] = '\u30D4'    // ﾋ → ピ
        半角カタカナ_全角カタカナ変換マップ_半濁音のみ['\uFF8C'] = '\u30D7'    // ﾌ → プ
        半角カタカナ_全角カタカナ変換マップ_半濁音のみ['\uFF8D'] = '\u30DA'    // ﾍ → ペ
        半角カタカナ_全角カタカナ変換マップ_半濁音のみ['\uFF8E'] = '\u30DD'    // ﾎ → ポ

        全角カタカナ_半角カタカナ変換マップ['\u3002'] = "\uFF61"    // 。 → ｡
        全角カタカナ_半角カタカナ変換マップ['\u300C'] = "\uFF62"    // 「 → ｢
        全角カタカナ_半角カタカナ変換マップ['\u300D'] = "\uFF63"    // 」 → ｣
        全角カタカナ_半角カタカナ変換マップ['\u3001'] = "\uFF64"    // 、 → ､
        全角カタカナ_半角カタカナ変換マップ['\u30FB'] = "\uFF65"    // ・ → ･
        全角カタカナ_半角カタカナ変換マップ['\u30F2'] = "\uFF66"    // ヲ → ｦ
        全角カタカナ_半角カタカナ変換マップ['\u30A1'] = "\uFF67"    // ァ → ｧ
        全角カタカナ_半角カタカナ変換マップ['\u30A3'] = "\uFF68"    // ィ → ｨ
        全角カタカナ_半角カタカナ変換マップ['\u30A5'] = "\uFF69"    // ゥ → ｩ
        全角カタカナ_半角カタカナ変換マップ['\u30A7'] = "\uFF6A"    // ェ → ｪ
        全角カタカナ_半角カタカナ変換マップ['\u30A9'] = "\uFF6B"    // ォ → ｫ
        全角カタカナ_半角カタカナ変換マップ['\u30E3'] = "\uFF6C"    // ャ → ｬ
        全角カタカナ_半角カタカナ変換マップ['\u30E5'] = "\uFF6D"    // ュ → ｭ
        全角カタカナ_半角カタカナ変換マップ['\u30E7'] = "\uFF6E"    // ョ → ｮ
        全角カタカナ_半角カタカナ変換マップ['\u30C3'] = "\uFF6F"    // ッ → ｯ
        全角カタカナ_半角カタカナ変換マップ['\u30FC'] = "\uFF70"    // ー → ｰ
        全角カタカナ_半角カタカナ変換マップ['\u30A2'] = "\uFF71"    // ア → ｱ
        全角カタカナ_半角カタカナ変換マップ['\u30A4'] = "\uFF72"    // イ → ｲ
        全角カタカナ_半角カタカナ変換マップ['\u30A6'] = "\uFF73"    // ウ → ｳ
        全角カタカナ_半角カタカナ変換マップ['\u30A8'] = "\uFF74"    // エ → ｴ
        全角カタカナ_半角カタカナ変換マップ['\u30AA'] = "\uFF75"    // オ → ｵ
        全角カタカナ_半角カタカナ変換マップ['\u30AB'] = "\uFF76"    // カ → ｶ
        全角カタカナ_半角カタカナ変換マップ['\u30AD'] = "\uFF77"    // キ → ｷ
        全角カタカナ_半角カタカナ変換マップ['\u30AF'] = "\uFF78"    // ク → ｸ
        全角カタカナ_半角カタカナ変換マップ['\u30B1'] = "\uFF79"    // ケ → ｹ
        全角カタカナ_半角カタカナ変換マップ['\u30B3'] = "\uFF7A"    // コ → ｺ
        全角カタカナ_半角カタカナ変換マップ['\u30B5'] = "\uFF7B"    // サ → ｻ
        全角カタカナ_半角カタカナ変換マップ['\u30B7'] = "\uFF7C"    // シ → ｼ
        全角カタカナ_半角カタカナ変換マップ['\u30B9'] = "\uFF7D"    // ス → ｽ
        全角カタカナ_半角カタカナ変換マップ['\u30BB'] = "\uFF7E"    // セ → ｾ
        全角カタカナ_半角カタカナ変換マップ['\u30BD'] = "\uFF7F"    // ソ → ｿ
        全角カタカナ_半角カタカナ変換マップ['\u30BF'] = "\uFF80"    // タ → ﾀ
        全角カタカナ_半角カタカナ変換マップ['\u30C1'] = "\uFF81"    // チ → ﾁ
        全角カタカナ_半角カタカナ変換マップ['\u30C4'] = "\uFF82"    // ツ → ﾂ
        全角カタカナ_半角カタカナ変換マップ['\u30C6'] = "\uFF83"    // テ → ﾃ
        全角カタカナ_半角カタカナ変換マップ['\u30C8'] = "\uFF84"    // ト → ﾄ
        全角カタカナ_半角カタカナ変換マップ['\u30CA'] = "\uFF85"    // ナ → ﾅ
        全角カタカナ_半角カタカナ変換マップ['\u30CB'] = "\uFF86"    // ニ → ﾆ
        全角カタカナ_半角カタカナ変換マップ['\u30CC'] = "\uFF87"    // ヌ → ﾇ
        全角カタカナ_半角カタカナ変換マップ['\u30CD'] = "\uFF88"    // ネ → ﾈ
        全角カタカナ_半角カタカナ変換マップ['\u30CE'] = "\uFF89"    // ノ → ﾉ
        全角カタカナ_半角カタカナ変換マップ['\u30CF'] = "\uFF8A"    // ハ → ﾊ
        全角カタカナ_半角カタカナ変換マップ['\u30D2'] = "\uFF8B"    // ヒ → ﾋ
        全角カタカナ_半角カタカナ変換マップ['\u30D5'] = "\uFF8C"    // フ → ﾌ
        全角カタカナ_半角カタカナ変換マップ['\u30D8'] = "\uFF8D"    // ヘ → ﾍ
        全角カタカナ_半角カタカナ変換マップ['\u30DB'] = "\uFF8E"    // ホ → ﾎ
        全角カタカナ_半角カタカナ変換マップ['\u30DE'] = "\uFF8F"    // マ → ﾏ
        全角カタカナ_半角カタカナ変換マップ['\u30DF'] = "\uFF90"    // ミ → ﾐ
        全角カタカナ_半角カタカナ変換マップ['\u30E0'] = "\uFF91"    // ム → ﾑ
        全角カタカナ_半角カタカナ変換マップ['\u30E1'] = "\uFF92"    // メ → ﾒ
        全角カタカナ_半角カタカナ変換マップ['\u30E2'] = "\uFF93"    // モ → ﾓ
        全角カタカナ_半角カタカナ変換マップ['\u30E4'] = "\uFF94"    // ヤ → ﾔ
        全角カタカナ_半角カタカナ変換マップ['\u30E6'] = "\uFF95"    // ユ → ﾕ
        全角カタカナ_半角カタカナ変換マップ['\u30E8'] = "\uFF96"    // ヨ → ﾖ
        全角カタカナ_半角カタカナ変換マップ['\u30E9'] = "\uFF97"    // ラ → ﾗ
        全角カタカナ_半角カタカナ変換マップ['\u30EA'] = "\uFF98"    // リ → ﾘ
        全角カタカナ_半角カタカナ変換マップ['\u30EB'] = "\uFF99"    // ル → ﾙ
        全角カタカナ_半角カタカナ変換マップ['\u30EC'] = "\uFF9A"    // レ → ﾚ
        全角カタカナ_半角カタカナ変換マップ['\u30ED'] = "\uFF9B"    // ロ → ﾛ
        全角カタカナ_半角カタカナ変換マップ['\u30EF'] = "\uFF9C"    // ワ → ﾜ
        全角カタカナ_半角カタカナ変換マップ['\u30F3'] = "\uFF9D"    // ン → ﾝ
        全角カタカナ_半角カタカナ変換マップ['\u30AC'] = "\uFF76" + 半角カタカナ濁音記号 // ガ → ｶﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30AE'] = "\uFF77" + 半角カタカナ濁音記号 // ギ → ｷﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30B0'] = "\uFF78" + 半角カタカナ濁音記号 // グ → ｸﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30B2'] = "\uFF79" + 半角カタカナ濁音記号 // ゲ → ｹﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30B4'] = "\uFF7A" + 半角カタカナ濁音記号 // ゴ → ｺﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30B6'] = "\uFF7B" + 半角カタカナ濁音記号 // ザ → ｻﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30B8'] = "\uFF7C" + 半角カタカナ濁音記号 // ジ → ｼﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30BA'] = "\uFF7D" + 半角カタカナ濁音記号 // ズ → ｽﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30BC'] = "\uFF7E" + 半角カタカナ濁音記号 // ゼ → ｾﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30BE'] = "\uFF7F" + 半角カタカナ濁音記号 // ゾ → ｿﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30C0'] = "\uFF80" + 半角カタカナ濁音記号 // ダ → ﾀﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30C2'] = "\uFF81" + 半角カタカナ濁音記号 // ヂ → ﾁﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30C5'] = "\uFF82" + 半角カタカナ濁音記号 // ヅ → ﾂﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30C7'] = "\uFF83" + 半角カタカナ濁音記号 // デ → ﾃﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30C9'] = "\uFF84" + 半角カタカナ濁音記号 // ド → ﾄﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30D0'] = "\uFF8A" + 半角カタカナ濁音記号 // バ → ﾊﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30D3'] = "\uFF8B" + 半角カタカナ濁音記号 // ビ → ﾋﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30D6'] = "\uFF8C" + 半角カタカナ濁音記号 // ブ → ﾌﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30D9'] = "\uFF8D" + 半角カタカナ濁音記号 // ベ → ﾍﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30DC'] = "\uFF8E" + 半角カタカナ濁音記号 // ボ → ﾎﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30D1'] = "\uFF8A" + 半角カタカナ半濁音記号 // パ → ﾊﾟ
        全角カタカナ_半角カタカナ変換マップ['\u30D4'] = "\uFF8B" + 半角カタカナ半濁音記号 // ピ → ﾋﾟ
        全角カタカナ_半角カタカナ変換マップ['\u30D7'] = "\uFF8C" + 半角カタカナ半濁音記号 // プ → ﾌﾟ
        全角カタカナ_半角カタカナ変換マップ['\u30DA'] = "\uFF8D" + 半角カタカナ半濁音記号 // ペ → ﾍﾟ
        全角カタカナ_半角カタカナ変換マップ['\u30DD'] = "\uFF8E" + 半角カタカナ半濁音記号 // ポ → ﾎﾟ
        全角カタカナ_半角カタカナ変換マップ['\u30F4'] = "\uFF73" + 半角カタカナ半濁音記号 // ヴ → ｳﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30F7'] = "\uFF9C" + 半角カタカナ半濁音記号 // ヷ → ﾜﾞ
        全角カタカナ_半角カタカナ変換マップ['\u30FA'] = "\uFF66" + 半角カタカナ半濁音記号 // ヺ → ｦﾞ
    }

    private fun 例外をスローする(メッセージID: メッセージID一覧, vararg パラメータ: Any): Nothing {
        throw 共通処理エラークラス(文字列道具箱.javaClass, メッセージID, *パラメータ)
    }

    fun 文字列配列を改行して接続する(対象配列: Collection<Any>): String {
        return 文字列配列を接続する(対象配列, "\n")
    }

    fun 文字列配列をカンマで接続する(対象配列: Collection<Any>): String {
        return 文字列配列を接続する(対象配列, ", ")
    }

    fun 文字列配列を読点で接続する(対象配列: Collection<Any>): String {
        return 文字列配列を接続する(対象配列, "、")
    }

    fun 文字列配列を接続する(対象配列: Collection<Any>, 区切り文字: String): String {
        when (対象配列.size) {
            0 -> {
                return ""
            }
            1 -> {
                return 対象配列.iterator().next().toString()
            }
        }
        val バッファ: StringBuilder = StringBuilder(対象配列.size * (30 + 区切り文字.length))
        var 初回 = true
        for (要素 in 対象配列) {
            if (初回) {
                初回 = false;
            } else {
                バッファ.append(区切り文字)
            }
            バッファ.append(要素.toString())
        }
        return バッファ.toString()
    }

    fun 空文字列か(文字列: String?): Boolean {
        return 文字列 == null || 文字列.isEmpty()
    }

    fun 空文字列ならNULLを返す(文字列: String?): String? {
        return if (空文字列か(文字列)) null else 文字列
    }

    fun 空白文字か(文字: Char): Boolean {
        return 空白属性文字セット.contains(文字)
    }

    fun 空白文字列か(文字列: String?): Boolean {
        if (空文字列か(文字列)) {
            return true
        }
        return !(文字列 as String).toCharArray().any { !空白文字か(it) }
    }

    fun 最初の空白以外の文字の位置を探す(文字列: String?): Int {
        if (空文字列か(文字列)) {
            return -1
        }
        return (文字列 as String).toCharArray().indexOfFirst { !空白文字か(it) }
    }

    fun 最後の空白以外の文字の位置を探す(文字列: String?): Int {
        if (空文字列か(文字列)) {
            return -1
        }
        return (文字列 as String).toCharArray().indexOfLast { !空白文字か(it) }
    }

    fun 末尾の空白文字列の先頭を返す(文字列: String?): Int {
        val 最後の空白以外の文字の位置 = 最後の空白以外の文字の位置を探す(文字列)
        if (最後の空白以外の文字の位置 == -1) {
            return -1
        }
        return 最後の空白以外の文字の位置 + 1
    }

    fun 先頭の空白を削除する(文字列: String?): String? {
        return if (空文字列か(文字列)) 文字列 else if (空白文字列か(文字列)) ""
        else {
            (文字列 as String).substring(最初の空白以外の文字の位置を探す(文字列))
        }
    }

    fun 末尾の空白を削除する(文字列: String?): String? {
        return if (空文字列か(文字列)) 文字列 else if (空白文字列か(文字列)) ""
        else {
            (文字列 as String).substring(0, 末尾の空白文字列の先頭を返す(文字列))
        }
    }

    fun 前後の空白を削除する(文字列: String?): String? {
        return if (空文字列か(文字列)) 文字列 else if (空白文字列か(文字列)) ""
        else {
            (文字列 as String).substring(最初の空白以外の文字の位置を探す(文字列), 末尾の空白文字列の先頭を返す(文字列))
        }
    }

    fun 先頭の空白を削除し_空ならnullで返す(文字列: String?): String? {
        return if (空文字列か(文字列) || 空白文字列か(文字列)) null
        else {
            val 結果: String? = (文字列 as String).substring(最初の空白以外の文字の位置を探す(文字列))
            if (空文字列か(結果) || 空白文字列か(結果)) {
                null
            } else {
                結果
            }
        }
    }

    fun 末尾の空白を削除し_空ならnullで返す(文字列: String?): String? {
        return if (空文字列か(文字列) || 空白文字列か(文字列)) null
        else {
            val 結果: String? = (文字列 as String).substring(0, 末尾の空白文字列の先頭を返す(文字列))
            if (空文字列か(結果) || 空白文字列か(結果)) {
                null
            } else {
                結果
            }
        }
    }

    fun 前後の空白を削除し_空ならnullで返す(文字列: String?): String? {
        return if (空文字列か(文字列) || 空白文字列か(文字列)) null
        else {
            val 結果: String? = (文字列 as String).substring(最初の空白以外の文字の位置を探す(文字列), 末尾の空白文字列の先頭を返す(文字列))
            if (空文字列か(結果) || 空白文字列か(結果)) {
                null
            } else {
                結果
            }
        }
    }

    fun 数字か(文字: Char): Boolean {
        return 半角数字か(文字) || 全角数字か(文字)
    }

    fun 半角数字か(文字: Char): Boolean {
        return (文字 in '\uff10'..'\uff19')
    }

    fun 全角数字か(文字: Char): Boolean {
        return (文字 in '\u0030'..'\u0039')
    }

    fun 半角数字を全角数字に変更する(文字: Char): Char {
        return if (半角数字か(文字)) {
            (((文字 as Int) and 0xF) + 0x0030) as Char
        } else {
            文字
        }
    }

    fun 全角数字を半角数字に変更する(文字: Char): Char {
        return if (全角数字か(文字)) {
            (((((文字 as Int) and 0xF) + 0xff1)) and 0xffff) as Char
        } else {
            文字
        }
    }

    fun 半角数字を全角数字に変更する(文字列: String?): String? {
        return 全角数字と半角数字の変換を行う(文字列, ({ 文字: Char -> 半角数字を全角数字に変更する(文字) }))
    }

    fun 全角数字を半角数字に変更する(文字列: String?): String? {
        return 全角数字と半角数字の変換を行う(文字列, ({ 文字: Char -> 全角数字を半角数字に変更する(文字) }))
    }

    private fun 全角数字と半角数字の変換を行う(文字列: String?, 変更操作: (文字: Char) -> Char): String? {
        return if (空文字列か(文字列)) {
            文字列
        } else if (空白文字列か(文字列)) {
            ""
        } else {
            val 対象文字列 = 文字列 as String
            val 変換後の文字列 = StringBuilder(対象文字列.length)
            文字列.toCharArray().forEach {
                変換後の文字列.append(変更操作(it))
            }
            return 変換後の文字列.toString()
        }
    }

    fun 全ての空白文字を半角空白に変換する(文字列: String?): String? {
        return if (文字列 == null) {
            null
        } else if (文字列.isEmpty()) {
            ""
        } else {
            val 変換後の文字列 = StringBuilder(文字列.length)
            文字列.toCharArray().forEach {
                変換後の文字列.append(if (空白文字か(it)) 半角スペース else it)
            }
            return 変換後の文字列.toString()
        }
    }

    fun 前後の空白を削除し連続した空白を半角空白1文字にする(文字列: String?): String? {

        val 文字列値 = 前後の空白を削除する(文字列)

        if (文字列値 == null) {
            return null

        } else if (文字列値.isEmpty()) {
            return ""

        } else {
            val 対象文字列 = 全ての空白文字を半角空白に変換する(文字列) as String

            val 語分割 = 対象文字列.split(半角スペース)

            val 語数 = 語分割.size
            when (語数) {
                1 -> {
                    return 語分割[0]
                }
                else -> {
                    val 変換後の文字列 = StringBuilder(対象文字列.length)

                    repeat(語数) {
                        when (it) {
                            語数 - 1 -> {
                                変換後の文字列.append(語分割[it])
                            }
                            else -> {
                                変換後の文字列.append(語分割[it]).append(半角スペース)
                            }
                        }
                    }

                    return 変換後の文字列.toString()
                }
            }
        }
    }
}